#!/usr/bin/env node

/**
 * Module dependencies.
 */
//
const cluster = require('cluster');

//
const config = require('./../config/config.js');
const define = require('./../config/define.js');
const logger = require('./../src/utils/winlog.js');

// cluster.schedulingPolicy = cluster.SCHED_RR;

//
let MAX_CLUSTER = 10

if (cluster.isMaster)
{
    console.log(define.START_MSG);

    logger.info("[M] Master start");
    
    for (var i = 0; i < MAX_CLUSTER; i++)
    {
        cluster.fork();
    }
} 
else
{
    //
    var http = require('http');
    var debug = require('debug')('tn:server');

    //
    // var app = require('./../app');
    var app = require('./../app.js');
    
    //
    logger.info("[W] " + cluster.worker.id + "'s Worker start");

    /**
    * Get port from environment and store in Express.
    */
    var port = normalizePort(config.CFG_PATH.WEBAPI.ISAG_PORT.toString() || '3000'); // '3000'
    app.set('port', port);

    /**
    * Create HTTP server.
    */
    var server = http.createServer(app);

    /**
    * Listen on provided port, on all network interfaces.
    */
    server.listen(port);
    // server.on('error', nodeonError);
    // server.on('listening', onListening);

    /**
    * Normalize a port into a number, string, or false.
    */
    function normalizePort(val) {
        var port = parseInt(val, 10);

        if (isNaN(port))
        {
            // named pipe
            return val;
        }

        if (port >= 0)
        {
            // port number
            return port;
        }

        return false;
    }

    /**
    * Event listener for HTTP server "error" event.
    */
    function onError(error) {
        if (error.syscall !== 'listen')
        {
            throw error;
        }

        var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code)
        {
            case 'EACCES':
                logger.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                logger.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }

    /**
    * Event listener for HTTP server "listening" event.
    */
    function onListening() {
        var addr = server.address();
        var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
        debug('Listening on ' + bind);
    }
}